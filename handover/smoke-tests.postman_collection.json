{
  "info": {
    "name": "Jeen Mata Impex API - Smoke Tests",
    "description": "Comprehensive API testing collection for backend validation",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3001/api/v1",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "product_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "inquiry_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "shipment_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Authentication",
      "item": [
        {
          "name": "Login - Owner",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has token', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('token');",
                  "    pm.expect(response.data).to.have.property('user');",
                  "    pm.collectionVariables.set('auth_token', response.data.token);",
                  "});",
                  "",
                  "pm.test('User has owner role', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.user.role).to.equal('owner');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"pradeep@jeenmataimPex.com\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Login - Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login fails with invalid credentials', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "2. Products",
      "item": [
        {
          "name": "Get All Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Products retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response).to.have.property('pagination');",
                  "    pm.expect(response.pagination).to.have.property('page');",
                  "    pm.expect(response.pagination).to.have.property('total');",
                  "});",
                  "",
                  "pm.test('Products have required fields', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.data.length > 0) {",
                  "        const product = response.data[0];",
                  "        pm.expect(product).to.have.property('id');",
                  "        pm.expect(product).to.have.property('name');",
                  "        pm.expect(product).to.have.property('price');",
                  "        pm.expect(product).to.have.property('category');",
                  "        pm.expect(product).to.have.property('brand');",
                  "        pm.collectionVariables.set('product_id', product.id);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/products?page=1&pageSize=10",
              "host": ["{{base_url}}"],
              "path": ["products"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Get Products with Filters",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Filtered products retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Products match filter criteria', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.data.length > 0) {",
                  "        response.data.forEach(product => {",
                  "            pm.expect(product.brand.toLowerCase()).to.include('bosch');",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/products?q=bosch&category=Power Tools&inStock=true",
              "host": ["{{base_url}}"],
              "path": ["products"],
              "query": [
                {
                  "key": "q",
                  "value": "bosch"
                },
                {
                  "key": "category",
                  "value": "Power Tools"
                },
                {
                  "key": "inStock",
                  "value": "true"
                }
              ]
            }
          }
        },
        {
          "name": "Get Product by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Product details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Product has all details', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('specifications');",
                  "    pm.expect(response.data).to.have.property('variants');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["products", "{{product_id}}"]
            }
          }
        },
        {
          "name": "Create Product (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Product created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Created product returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.expect(response.data.name).to.equal('Test Drill Product');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Drill Product\",\n  \"description\": \"Test product for API validation\",\n  \"price\": 5000,\n  \"category\": \"Power Tools\",\n  \"brand\": \"Bosch\",\n  \"imageUrl\": \"https://example.com/image.jpg\",\n  \"inStock\": true,\n  \"sku\": \"TEST-DRILL-001\",\n  \"specifications\": {\n    \"Power\": \"500W\",\n    \"Weight\": \"1.5kg\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/products",
              "host": ["{{base_url}}"],
              "path": ["products"]
            }
          }
        },
        {
          "name": "Update Product (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Product updated successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated fields reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.price).to.equal(5500);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"price\": 5500,\n  \"description\": \"Updated test product description\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["products", "{{product_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "3. Brands & Categories",
      "item": [
        {
          "name": "Get All Brands",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Brands retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Brands have required fields', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.data.length > 0) {",
                  "        const brand = response.data[0];",
                  "        pm.expect(brand).to.have.property('id');",
                  "        pm.expect(brand).to.have.property('name');",
                  "        pm.expect(brand).to.have.property('countryOfOrigin');",
                  "        pm.expect(brand).to.have.property('productCount');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/brands",
              "host": ["{{base_url}}"],
              "path": ["brands"]
            }
          }
        },
        {
          "name": "Get All Categories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Categories retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Categories have translations', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.data.length > 0) {",
                  "        const category = response.data[0];",
                  "        pm.expect(category).to.have.property('name');",
                  "        pm.expect(category).to.have.property('nameNe');",
                  "        pm.expect(category).to.have.property('productCount');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/categories",
              "host": ["{{base_url}}"],
              "path": ["categories"]
            }
          }
        }
      ]
    },
    {
      "name": "4. Inquiries",
      "item": [
        {
          "name": "Submit Customer Inquiry",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Inquiry submitted successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Inquiry has ID and status', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.expect(response.data.status).to.equal('pending');",
                  "    pm.collectionVariables.set('inquiry_id', response.data.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"products\": [\n    {\n      \"productId\": \"1\",\n      \"variantId\": \"1-10mm\",\n      \"packingOptionId\": \"1-10-piece\",\n      \"quantity\": 5,\n      \"notes\": \"Urgent delivery needed\"\n    },\n    {\n      \"productId\": \"3\",\n      \"quantity\": 10\n    }\n  ],\n  \"whatsappNumber\": \"+977-9841234567\",\n  \"customerName\": \"Test Customer\",\n  \"customerEmail\": \"test@example.com\",\n  \"customerCompany\": \"Test Construction Co.\",\n  \"customerNotes\": \"Building project, need tools next week\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/inquiries",
              "host": ["{{base_url}}"],
              "path": ["inquiries"]
            }
          }
        },
        {
          "name": "Get Inquiries (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Inquiries retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Inquiries have pagination', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('pagination');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/inquiries?status=pending&page=1&pageSize=10",
              "host": ["{{base_url}}"],
              "path": ["inquiries"],
              "query": [
                {
                  "key": "status",
                  "value": "pending"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Update Inquiry Status (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Inquiry status updated', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"responded\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/inquiries/{{inquiry_id}}",
              "host": ["{{base_url}}"],
              "path": ["inquiries", "{{inquiry_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "5. Shipments",
      "item": [
        {
          "name": "Get Public Shipments",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Shipments retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Shipments have tracking info', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.data.length > 0) {",
                  "        const shipment = response.data[0];",
                  "        pm.expect(shipment).to.have.property('referenceNumber');",
                  "        pm.expect(shipment).to.have.property('trackingNumber');",
                  "        pm.expect(shipment).to.have.property('status');",
                  "        pm.collectionVariables.set('shipment_id', shipment.id);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/shipments?page=1&pageSize=10",
              "host": ["{{base_url}}"],
              "path": ["shipments"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Get Shipment Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Shipment details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Shipment has timeline and manifest', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('timeline');",
                  "    pm.expect(response.data).to.have.property('manifestItems');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/shipments/{{shipment_id}}",
              "host": ["{{base_url}}"],
              "path": ["shipments", "{{shipment_id}}"]
            }
          }
        },
        {
          "name": "Create Shipment (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Shipment created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Shipment has manifest items', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.manifestItems).to.have.length.above(0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"referenceNumber\": \"CSG-TEST-001\",\n  \"carrier\": \"DHL Express\",\n  \"origin\": \"Test Origin\",\n  \"destination\": \"Jeen Mata Warehouse\",\n  \"estimatedDelivery\": \"2024-03-15T00:00:00Z\",\n  \"notes\": \"Test shipment for API validation\",\n  \"manifestItems\": [\n    {\n      \"productId\": \"1\",\n      \"variantId\": \"1-10mm\",\n      \"packingOptionId\": \"1-10-box\",\n      \"quantity\": 5,\n      \"totalPieces\": 25\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/shipments",
              "host": ["{{base_url}}"],
              "path": ["shipments"]
            }
          }
        },
        {
          "name": "Update Shipment Status (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Shipment updated successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"in_transit\",\n  \"notes\": \"Shipment departed from origin\",\n  \"timeline\": [\n    {\n      \"status\": \"in_transit\",\n      \"timestamp\": \"2024-03-01T10:00:00Z\",\n      \"location\": \"Origin Port\",\n      \"notes\": \"Departed via air cargo\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/shipments/{{shipment_id}}",
              "host": ["{{base_url}}"],
              "path": ["shipments", "{{shipment_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "6. Settings & Admin",
      "item": [
        {
          "name": "Get Admin Settings",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Settings retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Settings have required sections', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('catalog');",
                  "    pm.expect(response.data).to.have.property('localization');",
                  "    pm.expect(response.data.catalog).to.have.property('priceVisibility');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/settings",
              "host": ["{{base_url}}"],
              "path": ["settings"]
            }
          }
        },
        {
          "name": "Update Settings (Owner Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Settings updated successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"catalog\": {\n    \"priceVisibility\": false,\n    \"lowStockThreshold\": 5\n  },\n  \"inquiries\": {\n    \"emailNotifications\": true\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/settings",
              "host": ["{{base_url}}"],
              "path": ["settings"]
            }
          }
        }
      ]
    },
    {
      "name": "7. File Uploads",
      "item": [
        {
          "name": "Request Signed Upload URL",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Signed URL generated', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Upload URL and public URL provided', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('uploadUrl');",
                  "    pm.expect(response.data).to.have.property('publicUrl');",
                  "    pm.expect(response.data).to.have.property('storagePath');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"filename\": \"test-product-image.jpg\",\n  \"contentType\": \"image/jpeg\",\n  \"pathHint\": \"products/test-product\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/uploads/signed-url",
              "host": ["{{base_url}}"],
              "path": ["uploads", "signed-url"]
            }
          }
        }
      ]
    },
    {
      "name": "8. Error Handling Tests",
      "item": [
        {
          "name": "Product Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Returns 404 for non-existent product', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/products/non-existent-id",
              "host": ["{{base_url}}"],
              "path": ["products", "non-existent-id"]
            }
          }
        },
        {
          "name": "Unauthorized Admin Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Returns 401 for unauthorized access', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/inquiries",
              "host": ["{{base_url}}"],
              "path": ["inquiries"]
            }
          }
        },
        {
          "name": "Invalid Product Creation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Returns validation error', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error details provided', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response).to.have.property('details');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"\",\n  \"description\": \"Missing required fields\",\n  \"category\": \"Invalid Category\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/products",
              "host": ["{{base_url}}"],
              "path": ["products"]
            }
          }
        }
      ]
    }
  ]
}